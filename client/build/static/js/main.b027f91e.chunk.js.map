{"version":3,"sources":["reportWebVitals.js","app/Channel.jsx","app/Channels.jsx","app/Message.jsx","app/MessageContainer.jsx","app/ChatApp.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Channel","id","name","participants","onClick","className","Channels","channels","onChannelSelect","length","map","channel","defaultProps","Message","senderName","messageText","MessageContainer","onSendMessage","useState","input","setInput","messages","message","sendername","text","type","onChange","event","target","value","SERVER","ChatApp","thisSocket","setChannels","setChannel","loadChannels","a","fetch","response","console","log","json","data","handleChannelSelect","find","c","emit","ack","useEffect","socket","socketClient","on","forEach","channelId","push","configureSocket","Date","now","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b027f91e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nconst Channel = ({id, name, participants, onClick}) => {\n  const handleChannelClick = () => {\n    onClick(id);\n  }\n\n  return (\n    <div className=\"channel-item\" onClick={handleChannelClick}>\n      <span>{name}</span>\n      <span>{participants}</span>\n    </div>\n  )\n}\n\nChannel.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  participants: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Channel;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport Channel from './Channel';\n\nconst Channels = ({channels, onChannelSelect}) => {\n  return (\n    <div className=\"channel-list\">\n      {channels && channels.length > 0\n        ? channels.map(channel =>\n            <Channel\n              key={channel.id}\n              id={channel.id}\n              name={channel.name}\n              participants={channel.participants}\n              onClick={onChannelSelect}\n            />)\n          : \"No channels to display\"\n      }\n    </div>\n  );\n}\n\nChannels.defaultProps = {\n  channels: []\n}\n\nChannels.propTypes = {\n  channels: PropTypes.arrayOf(PropTypes.object),\n  onChannelSelect: PropTypes.func.isRequired\n}\n\nexport default Channels;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Message = ({senderName, messageText}) => {\n  return (\n    <div className=\"message-item\">\n      <div><b>{senderName}</b></div>\n      <span>{messageText}</span>\n    </div>\n  )\n}\n\nMessage.propTypes = {\n  senderName: PropTypes.string.isRequired,\n  messageText: PropTypes.string.isRequired\n}\n\nexport default Message;","import React, {useState} from 'react';\nimport PropTypes from \"prop-types\";\nimport Message from './Message';\n\nconst MessageContainer = ({channel, onSendMessage}) => {\n  const [input, setInput] = useState(\"\");\n\n  const sendMessage = () => {\n    if (input && input != \"\") {\n      onSendMessage(channel.id, input);\n      setInput(\"\");\n    }\n  }\n\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  }\n\n  return (\n    <div className=\"messages-panel\">\n      <div className=\"messages-list\">\n        {channel && channel.messages.length > 0\n          ? channel.messages.map(message =>\n            <Message\n              key={message.id}\n              id={message.id}\n              sendername={message.senderName}\n              messageText={message.text}\n            />)\n          : <div className=\"no-content-message\">No message to show</div>\n        }\n      </div>\n      {channel &&\n        <div className=\"messages-input\">\n          <input type=\"text\" onChange={handleInputChange} value={input} />\n          <button onClick={sendMessage}>Send</button>\n        </div>\n      }\n    </div>\n  )\n}\n\nMessageContainer.propTypes = {\n  channel: PropTypes.objectOf({\n      messages: PropTypes.array\n  }),\n  onSendMessage: PropTypes.func.isRequired\n}\n\nexport default MessageContainer;","import React, {useState, useEffect} from 'react';\nimport socketClient from \"socket.io-client\";\nimport Channels from \"./Channels\";\nimport MessageContainer from \"./MessageContainer\";\nconst SERVER = \"http://localhost:3030\";\n\nconst ChatApp = () => {\n  const [channels, setChannels] = useState(null)\n  const [channel, setChannel] = useState(null);\n  let thisSocket;\n\n  const loadChannels = async () => {\n    fetch(`${SERVER}/channels`).then(async response => {\n      console.log(response);\n      let data = await response.json();\n      console.log(\"data\", data, response);\n      setChannels(data.channels);\n    })\n  }\n\n  const configureSocket = () => {\n    const socket = socketClient(SERVER);\n    socket.on('connection', () => {\n      if (channel) {\n        handleChannelSelect(channel.id);\n      }\n    });\n    socket.on('channel', channel => {\n      channels.forEach(c => {\n        if (c.id === channel.id) {\n          c.participants = channel.participants;\n        }\n      });\n      setChannels(channels);\n    });\n    socket.on('message', message => {\n      channels.forEach(c => {\n        if (c.id === message.channelId) {\n          if (!c.messages) {\n            c.messages = [message];\n          } else {\n            c.messages.push(message);\n          }\n        }\n      });\n      setChannels(channels);\n    });\n    thisSocket = socket;\n  }\n\n  const handleChannelSelect = id => {\n    let channel = channels.find(c => {\n      return c.id === id;\n    });\n    setChannel(channel);\n    thisSocket.emit('channel-join', id, ack => {\n    });\n  }\n\n  const handleSendMessage = (channelId, text) => {\n    thisSocket.emit('send-message', { channelId, text, senderName: thisSocket.id, id: Date.now() });\n  }\n\n  useEffect(() => {\n    loadChannels();\n    configureSocket();\n  },[])\n\n  return (\n    <div className=\"chat-app\">\n      <Channels channels={channels} onChannelSelect={handleChannelSelect}/>\n      <MessageContainer onSendMessage={handleSendMessage} channel={channel}/>\n    </div>\n  );\n}\n\nexport default ChatApp;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ChatApp from \"./app/ChatApp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChatApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}